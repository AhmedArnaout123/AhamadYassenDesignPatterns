@page "/Students"
@using DesignPatternsProject.UI.Data
@using DesignPatternsProject.Models
@inject NavigationManager NavigationManager

<div class="container">
    <div class="text-end mb-3">
        <button @onclick="AddStudent" type="button" class="btn btn-primary">New Student</button>
    </div>
    <DxDataGrid Data="@StudentsList"
                ShowPager="false"
                KeyFieldName="@nameof(Student.Id)">
        <Columns>
            <DxDataGridColumn Field="@(nameof(Student.FirstName))"
                              Caption="First Name">
            </DxDataGridColumn>
            <DxDataGridColumn Field="@(nameof(Student.LastName))"
                              Caption="Last Name">
            </DxDataGridColumn>
            <DxDataGridColumn Field="@(nameof(Student.PhoneNumber))"
                              Caption="Phone Number">
            </DxDataGridColumn>
            <DxDataGridDateEditColumn Field="@nameof(Student.Birthday)"
                                      Caption="Birthday"
                                      DisplayFormat="dd.MM.yyyy">
            </DxDataGridDateEditColumn>
            <DxDataGridCommandColumn>
                <HeaderCellTemplate></HeaderCellTemplate>
                <CellTemplate Context="c">
                    <button type="button" class="btn btn-danger" @onclick="@(() => DeleteStudent((c as Student)!.Id))">Delete</button>
                </CellTemplate>
            </DxDataGridCommandColumn>
        </Columns>
    </DxDataGrid>
</div>

@*
<DxPopup></DxPopup>*@

@code {
    public StudentsService StudentsService = new StudentsService();

    public List<Student> StudentsList { get; set; } = new();

    public Student? EditStudentModel = new();
    
    private bool IsPopupVisible { get; set; }
    
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            StudentsList = await StudentsService.GetStudentsList();
            StudentsList = StudentsList.OrderByDescending(s => s.CreatedDate).ToList();
            await InvokeAsync(StateHasChanged);
        }
    }

    private void AddStudent()
    {
        NavigationManager.NavigateTo("NewStudent");
    }

    private async Task DeleteStudent(Guid studentId)
    {
        await StudentsService.DeleteStudent(studentId);
    }
}